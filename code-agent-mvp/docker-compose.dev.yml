version: '3.8'

# Development-optimized Docker Compose with hot reload and debugging
# Usage: docker-compose -f docker-compose.dev.yml up --build

networks:
  code-agent-dev:
    driver: bridge

volumes:
  azurite-data:
  grafana-data:
  prometheus-data:
  node_modules_gateway:
  node_modules_adapter:
  node_modules_llm_patch:

services:
  # =============================================================================
  # Core Application Services (Development Mode)
  # =============================================================================
  
  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "3001:3001"
      - "9230:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3001
      - LOG_LEVEL=debug
      - ORCHESTRATOR_URL=http://orchestrator:7071
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-dev-secret-123}
    volumes:
      # Live code reload
      - ./services/gateway/src:/app/src:ro
      - ./services/gateway/package.json:/app/package.json:ro
      - ./services/gateway/tsconfig.json:/app/tsconfig.json:ro
      - node_modules_gateway:/app/node_modules
    networks:
      - code-agent-dev
    depends_on:
      - prometheus
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./services/gateway/src
          target: /app/src
        - action: rebuild
          path: ./services/gateway/package.json

  adapter:
    build:
      context: ./services/adapter
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "3002:3002"
      - "9231:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3002
      - LOG_LEVEL=debug
      - ADO_ORG_URL=${ADO_ORG_URL:-https://dev.azure.com/yourorg}
      - ADO_PAT=${ADO_PAT:-dummy-token}
    volumes:
      - ./services/adapter/src:/app/src:ro
      - ./services/adapter/package.json:/app/package.json:ro
      - ./services/adapter/tsconfig.json:/app/tsconfig.json:ro
      - node_modules_adapter:/app/node_modules
    networks:
      - code-agent-dev
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./services/adapter/src
          target: /app/src
        - action: rebuild
          path: ./services/adapter/package.json

  llm-patch:
    build:
      context: ./services/llm-patch
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "3003:3003"
      - "9232:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3003
      - LOG_LEVEL=debug
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-dummy-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-dummy-key}
    volumes:
      - ./services/llm-patch/src:/app/src:ro
      - ./services/llm-patch/package.json:/app/package.json:ro
      - ./services/llm-patch/tsconfig.json:/app/tsconfig.json:ro
      - node_modules_llm_patch:/app/node_modules
    networks:
      - code-agent-dev
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./services/llm-patch/src
          target: /app/src
        - action: rebuild
          path: ./services/llm-patch/package.json

  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "7071:7071"
    environment:
      - NODE_ENV=development
      - AzureWebJobsStorage=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;
      - AzureWebJobsSecretStorageType=files
      - ADAPTER_SERVICE_URL=http://adapter:3002
      - LLM_PATCH_SERVICE_URL=http://llm-patch:3003
      - FUNCTIONS_WORKER_RUNTIME=node
      - FUNCTIONS_EXTENSION_VERSION=~4
    volumes:
      - ./services/orchestrator/src:/app/src:ro
      - ./services/orchestrator/package.json:/app/package.json:ro
      - ./services/orchestrator/tsconfig.json:/app/tsconfig.json:ro
      - ./services/orchestrator/host.json:/app/host.json:ro
      - ./services/orchestrator/local.settings.json:/app/local.settings.json:ro
    networks:
      - code-agent-dev
    depends_on:
      - azurite
      - adapter
      - llm-patch
    command: npm run dev

  # =============================================================================
  # Infrastructure Services
  # =============================================================================

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - azurite-data:/data
    command: azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --loose
    networks:
      - code-agent-dev

  # =============================================================================
  # Monitoring Services (Containerized)
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: agent-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./ops/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - code-agent-dev

  grafana:
    image: grafana/grafana:latest
    container_name: agent-grafana-dev
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./ops/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./ops/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngAlert
    networks:
      - code-agent-dev

  alertmanager:
    image: prom/alertmanager:latest
    container_name: agent-alertmanager-dev
    ports:
      - "9093:9093"
    volumes:
      - ./ops/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - code-agent-dev

  # =============================================================================
  # Development Tools
  # =============================================================================

  ngrok:
    build:
      context: ./ops/dev/ngrok
      dockerfile: Dockerfile
    ports:
      - "4040:4040"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN:-}
      - NGROK_REGION=${NGROK_REGION:-eu}
    # Use the Dockerfile CMD instead of override
    # command: ngrok http gateway:3001
    networks:
      - code-agent-dev
    depends_on:
      - gateway

  # Code Quality & Testing
  code-quality:
    image: node:20-alpine
    working_dir: /workspace
    volumes:
      - .:/workspace
    command: >
      sh -c "
        echo 'Running code quality checks...' &&
        npm run lint:check || true &&
        npm run format:check || true &&
        npm run test || true
      "
    networks:
      - code-agent-dev
    profiles: ["quality"]
