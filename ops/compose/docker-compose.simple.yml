version: '3.8'

services:
  # Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: code-agent-traefik
    restart: unless-stopped
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - code-agent
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Minimal Gateway Service (stub mode)
  gateway:
    image: node:20-alpine
    container_name: code-agent-gateway
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-test-secret}
      - PORT=3001
      - ORCHESTRATOR_URL=http://stub-orchestrator/api
      - RATE_LIMIT_MAX=100
      - RATE_LIMIT_WINDOW=60000
      - CORS_ORIGIN=*
    volumes:
      - ../../services/gateway:/app
    working_dir: /app
    command: >
      sh -c "
        echo 'Installing dependencies...' &&
        npm install &&
        echo 'Starting gateway service...' &&
        npm run dev
      "
    networks:
      - code-agent
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gateway.rule=PathPrefix(`/gateway`)"
      - "traefik.http.services.gateway.loadbalancer.server.port=3001"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Health Check Service
  health-check:
    image: node:20-alpine
    container_name: code-agent-health
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    command: >
      sh -c "
        echo 'Starting health check service...' &&
        cat > /tmp/server.js << 'EOF'
        const http = require('http');
        const server = http.createServer((req, res) => {
          if (req.url === '/health') {
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({
              status: 'ok',
              timestamp: new Date().toISOString(),
              service: 'AIForCoding',
              version: '1.0.0',
              mode: 'local-development'
            }));
          } else {
            res.writeHead(404);
            res.end('Not Found');
          }
        });
        server.listen(3000, () => {
          console.log('Health check service running on port 3000');
        });
        EOF
        node /tmp/server.js
      "
    networks:
      - code-agent
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.health.rule=PathPrefix(`/health`)"
      - "traefik.http.services.health.loadbalancer.server.port=3000"

networks:
  code-agent:
    name: code-agent-network
